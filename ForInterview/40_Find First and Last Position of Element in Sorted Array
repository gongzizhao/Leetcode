给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。
你的算法时间复杂度必须是 O(log n) 级别。
如果数组中不存在目标值，返回 [-1, -1]。
示例 1:
输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]
示例 2:
输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.empty()) return vector<int>{-1,-1};

        int firstPosition=findFirstPosition(nums,target);
        if(firstPosition==-1) return vector<int>{-1,-1};
 // 如果第 1 次出现的位置都找不到，肯定不存在最后 1 次出现的位置
 
        int lastPosition=findLastPosition(nums,target);        
        return vector<int>{firstPosition,lastPosition};
    }

    private:
    int findFirstPosition(vector<int>& nums, int target){
        int left=0,right=nums.size()-1,mid;
        while(left<=right){
            mid=left+(right-left)/2;
            if(nums[mid]>=target){
                right=mid-1;
            }else left=mid+1;//假若存在，left最后指向结果
        }
        //此时 left 和 right 的位置关系是 [right, left]
        //当target很小的时候，right在左端越界且left指向第一个元素，需要判断第一个元素是否为target
        //当target很大的时候，left在右端越界
        if(left!=nums.size()&&nums[left]==target) return left;//！！！这里if内顺序不可变
        else return -1;
    }

    private:
    int findLastPosition(vector<int>& nums, int target){
        int left=0,right=nums.size()-1,mid;
        while(left<=right){
            mid=left+(right-left)/2;
            if(nums[mid]<=target){
                left=mid+1;
            }else right=mid-1;// 此时 nums[mid] > target，应该继续向左边找，即 [left, mid - 1] 区间里找
        }
        return right;
    }
};
