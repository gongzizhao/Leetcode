给你一个长度为 n 的整数数组，请你判断在 最多 改变 1 个元素的情况下，该数组能否变成一个非递减数列。

我们是这样定义一个非递减数列的： 对于数组中所有的 i (0 <= i <= n-2)，总满足 nums[i] <= nums[i + 1]。

示例 1:

输入: nums = [4,2,3]
输出: true
解释: 你可以通过把第一个4变成1来使得它成为一个非递减数列。

思路：
①只能有一个拐点
②消除一个拐点后不能出现其他拐点。
③拐点的消除方式有上移和下移，通俗来说就是1332和1132的问题。
class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        int count=0;
        for(int i=1;i<nums.size();i++){
            if(nums[i-1]>nums[i]){
                count++;
                if(count>=2) return false;
                if((i-2>=0)&&nums[i-2]>nums[i]){
                    nums[i]=nums[i-1];
                }else nums[i-1]=nums[i];
            }
        }
        return true;
    }
};
