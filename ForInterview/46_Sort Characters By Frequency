给定一个字符串，请将字符串里的字符按照出现的频率降序排列。
输入:
"tree"

输出:
"eert"

解释:
'e'出现两次，'r'和't'都只出现一次。
因此'e'必须出现在'r'和't'之前。此外，"eetr"也是一个有效的答案。

class Solution {
public:   
    class myComparison{
        public:
            bool operator()(const pair<int,int>& lhs, const pair<int,int>& rhs){
                return lhs.second<rhs.second;//使小顶堆先pop的为大值
           }
        }; 
    string frequencySort(string s) {
        unordered_map<char,int> map;
        for(int i=0;i<s.size();i++){
            map[s[i]]++;//统计次数
        }
        priority_queue<pair<char,int>,vector<pair<char,int>>,myComparison> store;
        for(unordered_map<char,int>::iterator it=map.begin();it!=map.end();it++){
            store.push(*it);//大顶堆，有序插入
        }
        string result="";
        int j=0;
        while(!store.empty()){//有序输出
            result.append(store.top().second,store.top().first);
            store.pop();
        }
        return result;
    }
};

/////////////////////////////////////可优化/////////////////////////////////////////////
class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char, int> ump;
        for (const auto &c : s) {
            ++ump[c];
        }
        priority_queue<pair<int, char>> pq;
        for (const auto &m : ump) {
            pq.push({m.second, m.first});
        }        
        string ret;
        while (!pq.empty()) {
            auto t = pq.top(); 
            pq.pop();
            ret.append(t.first, t.second);
        }
        return ret;
    }
};
