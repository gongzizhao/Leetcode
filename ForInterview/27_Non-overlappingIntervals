给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。

注意:
可以认为区间的终点总是大于它的起点。
区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。
示例 1:
输入: [ [1,2], [2,3], [3,4], [1,3] ]
输出: 1
解释: 移除 [1,3] 后，剩下的区间没有重叠。

题解1：先将各个区间按照起始点从小到大进行排序。
贪心法的思路是在排好序之后，从头到尾贪心选择，使得在没有重叠的情况下，留下来的区间尽可能多；
因为其实点已经从小到大排序，从头开始考虑相邻两个区间：
1.那么相邻区间没有重叠，那么显然是可以直接将前一个区间加到结果中的；
2.如果相邻两个区间有重叠，假设区间为a，b；并且起始点a[0]<=b[0];则一定有a[1]>b[0];
    如果a[1]>=b[1],则b是a的子区间，如果要考虑重叠尽可能少，显然我们应该抛弃a区间；
    如果a[1]<b[1],抛弃b区间，因为对于b以后的区间c来说（c[0]>=b[0]>=a[0]），如果c与a有交集，也就是a[1]>c[0],那么必有b[1]>c[0],即b也与c有交集；为了使重叠区间尽可能少，我们应该抛弃b区间；
也就是当相邻空间有交集时，抛弃终点较大的空间。
class Solution {
public:    
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        if (intervals.empty()) return 0;
        sort(intervals.begin(), intervals.end());
        int left = intervals[0][1];
        int res = 0;
        for (int i = 1; i < intervals.size(); ++i) {
            if (intervals[i][0] < left) {
                ++res;
                left = min(left, intervals[i][1]);//抛弃右值比较大的区间
            } else {
                left = intervals[i][1];
            }
        }
        return res;
    }
};

