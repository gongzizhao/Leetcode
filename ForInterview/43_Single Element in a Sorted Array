给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。
示例 1:
输入: [1,1,2,3,3,4,4,8,8]
输出: 2
示例 2:
输入: [3,3,7,7,10,11,11]
输出: 10
注意: 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。

class Solution 
{
public:
    int singleNonDuplicate(vector<int>& nums) 
    {
        int l = 0;
        int h = nums.size() - 1;
        //二分查找
        while(l < h)
        {
            int mid = l + (h - l)/2;
            if(mid % 2 == 1)               //防止mid是奇数，是的话则左移一位
                mid--;
            if(nums[mid] == nums[mid+1])   //说明目标数在[mid+2,h]
                l = mid + 2;
            else                           //否则目标数在[l,mid]
                h = mid;
        } 
        return nums[l];   
    }
};
