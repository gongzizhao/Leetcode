假设按照升序排序的数组在预先未知的某个点上进行了旋转。
( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
请找出其中最小的元素。
注意数组中可能存在重复的元素。
示例 1：
输入: [1,3,5]
输出: 1
示例 2：
输入: [2,2,2,0,1]
输出: 0
说明：

这道题是 寻找旋转排序数组中的最小值 的延伸题目。
允许重复会影响算法的时间复杂度吗？会如何影响，为什么？

思路：去重之后这里可以分为三种情况：
①nums[mid]>=nums[left]&&nums[mid]>nums[right] 此时，左半边是有序的，故最小值一定在右边，所以让left=mid+1；
②nums[mid]>=nums[left]&&nums[mid]<=nums[right] 此时，[left，right]是有序的，故最小值就是nums[left]；
③nums[mid]<nums[left]&&nums[mid]<=nums[right] 此时，右半边是有序的，最小值可能是nums[mid]，也可能在左边，故让right=mid
不存在第4种情况：nums[mid]<nums[left]&&nums[mid]>nums[right]

class Solution {
public:
    int findMin(vector<int>& nums) {
        int left=0, right=nums.size()-1,mid;
        
        while(left<right&&nums[left]==nums[right]) right--;//先去重
        
        while(left<=right){
            mid=left+(right-left)/2;
            if(nums[mid]>=nums[left]&&nums[mid]<=nums[right]) return nums[left];
            else if(nums[mid]>=nums[left]&&nums[mid]>nums[right]) left=mid+1;
            else right=mid;//这里不能加1，否则会略去当中点mid就是最小值的时候
        } 
        return 0;
    }
};      
